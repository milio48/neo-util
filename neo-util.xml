<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html>
<html xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'>
<head>
  <meta charset='utf-8'/>
  <meta content='width=device-width, initial-scale=1' name='viewport'/>

  <!-- Title Tag -->
  <title>
    <b:if cond='data:blog.pageType == "index"'>
       <b:if cond='data:blog.searchQuery'>
          Search Results for &quot;<data:blog.searchQuery/>&quot; - <data:blog.title/>
       <b:elseif cond='data:blog.pageTitle != data:blog.title and data:blog.pageTitle != ""'/>
          <data:blog.pageTitle/> - <data:blog.title/>
       <b:else/>
          <data:blog.title/>
       </b:if>
    <b:elseif cond='data:blog.pageType == "error_page"'/>
       Page Not Found - <data:blog.title/>
    <b:else/> <!-- item, static_page -->
       <data:blog.pageTitle/>
    </b:if>
  </title>

  <!-- Meta Description -->
  <b:if cond='data:blog.metaDescription != ""'>
    <meta expr:content='data:blog.metaDescription' name='description'/>
  </b:if>

  <!-- Core Blogspot Head Elements -->
  <b:include data='blog' name='all-head-content'/>

  <!-- CSS Blogspot -->
    <b:skin><![CDATA[
    .neo-table-wrapper {overflow-x:auto; width:100%; margin:1em 0;} /* Wrapper for scroll */
    .neo-data-table {font-size:10px; border:1px solid #000; border-collapse:collapse;} /* Table styling (NO width:100%) */
    .neo-data-table th, .neo-data-table td {border:1px solid #ccc; padding:2px 4px; text-align:left; vertical-align:top; white-space:nowrap;} /* Added white-space:nowrap */
    .neo-data-table ul {margin:0; padding:0; list-style:none;}
    .neo-data-table li {display:inline-block; margin-right:4px;}
    ]]></b:skin>
</head>
<body>
  <!-- Site Header -->
  <header class='neo-site-header'>
    <div class='neo-site-title'>
      <h1><a expr:href='data:blog.homepageUrl'><data:blog.title/></a></h1>
    </div>
  </header>

  <!-- Main Content Area -->
  <main class='neo-main-content-area' id='neo-main'>
    <b:section class='neo-main-content-section' id='neo-main-section' maxwidgets='1' name='Main Content Section' showaddelement='no'>
      <b:widget id='Blog1' locked='true' title='Blog Posts' type='Blog' visible='true'>

        <!-- INCLUDABLE: Tabel Daftar Postingan -->
        <b:includable id='neoPostListTable' var='unused'>
          <!-- Tambahkan Div Wrapper -->
          <div class='neo-table-wrapper'>
            <table class='neo-data-table' id='neo-data-table-posts'>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Title</th>
                  <th>URL</th>
                  <th>Published ISO</th>
                  <th>Published Formatted</th>
                  <th>Author</th>
                  <th>Labels</th>
                  <th>Snippet</th>
                  <th>First Image URL</th>
                </tr>
              </thead>
              <tbody>
                <b:if cond='data:posts and data:numPosts > 0'>
                  <b:loop values='data:posts' var='post' index='i'>
                    <tr expr:data-post-id='data:post.id'>
                      <td><data:post.id/></td>
                      <td><data:post.title/></td>
                      <td><a expr:href='data:post.url'><data:post.url/></a></td>
                      <td><time expr:datetime='data:post.timestampISO8601'><data:post.timestampISO8601/></time></td>
                      <td><data:post.timestamp/></td>
                      <td><data:post.author/></td>
                      <td>
                        <b:if cond='data:post.labels'>
                          <ul>
                            <b:loop values='data:post.labels' var='label'>
                              <li expr:data-label-url='data:label.url'><data:label.name/></li>
                            </b:loop>
                          </ul>
                        <b:else/>-</b:if>
                      </td>
                      <td>
                         <b:if cond='data:post.snippet'><data:post.snippet/><b:else/>-</b:if>
                      </td>
                      <td>
                        <b:eval expr='data:post.firstImageUrl ? resizeImage(data:post.firstImageUrl, 72, "1:1") : "(No image)"'/>
                      </td>
                    </tr>
                  </b:loop>
                <b:else/>
                   <tr>
                     <td colspan='9'>No posts found for this view.</td>
                   </tr>
                </b:if>
              </tbody>
            </table>
          </div> <!-- Tutup Div Wrapper -->
        </b:includable>
        <!-- AKHIR INCLUDABLE neoPostListTable -->

        <!-- INCLUDABLE UTAMA: Logika Halaman -->
        <b:includable id='main' var='top'>
          <div class='neo-content-wrapper'>
            <!-- Page Type Logic -->

            <!-- Page 1. Homepage -->
            <b:if cond='data:blog.url == data:blog.homepageUrl'>
              <div class='neo-homepage-data'>
                <h2>Homepage Post Data</h2>
                <b:include name='neoPostListTable'/>
              </div>

            <!-- Page 2. Item Page (Single Post) - Rendering Asli -->
            <b:elseif cond='data:blog.pageType == "item"'/>
              <b:loop values='data:posts' var='post'>
                <article class='neo-post' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'>
                  <h1 itemprop='headline'><data:post.title/></h1>
                  <div class='neo-post-meta'>
                    <span class='neo-post-timestamp'>
                      Published on:
                      <time expr:datetime='data:post.timestampISO8601' itemprop='datePublished'><data:post.timestamp/></time>
                    </span>
                    <b:if cond='data:post.labels'>
                      <span class='neo-post-labels'> | Labels:
                        <b:loop values='data:post.labels' var='label'>
                          <a expr:href='data:label.url' itemprop='keywords' rel='tag'><data:label.name/></a><b:if cond='data:label.isLast != "true"'>, </b:if>
                        </b:loop>
                      </span>
                    </b:if>
                  </div>
                  <div class='neo-post-content' itemprop='articleBody' expr:id='"neo-post-body-" + data:post.id'>
                    <data:post.body/>
                  </div>
                </article>
              </b:loop>

            <!-- Page 3. Static Page - Rendering Asli -->
            <b:elseif cond='data:blog.pageType == "static_page"'/>
              <b:loop values='data:posts' var='post'>
                <div class='neo-custom-page'>
                  <h1 class='neo-page-title'><data:post.title/></h1>
                  <div class='neo-page-content' expr:id='"neo-post-body-" + data:post.id'>
                     <data:post.body/>
                  </div>
                </div>
              </b:loop>

            <!-- Page 4. Archive Page -->
            <b:elseif cond='data:blog.pageType == "archive"'/>
              <div class='neo-archive-data'>
                 <h2 class='neo-page-title'>Archive: <data:blog.pageName/> - Post Data</h2>
                 <b:include name='neoPostListTable'/>
              </div>

            <!-- Page 5. Label & Search (Index) -->
            <b:elseif cond='data:blog.pageType == "index"'/>
              <div class='neo-index-data'>
                <b:if cond='data:blog.searchQuery'>
                  <h2 class='neo-page-title'>Search Results: &quot;<data:blog.searchQuery/>&quot; - Post Data</h2>
                <b:else/> <!-- Label Page -->
                  <h2 class='neo-page-title'>Label: <data:blog.pageName/> - Post Data</h2>
                </b:if>
                <b:include name='neoPostListTable'/>
              </div>

            <!-- Page 6. Error Page (404) -->
            <b:elseif cond='data:blog.pageType == "error_page"'/>
               <div class='neo-error-page'>
                  <h1 class='neo-page-title'>Oops! Page Not Found (404)</h1>
                  <p>Sorry, the content you are looking for is not here.</p>
               </div>

            <!-- Page 7. Fallback for Unknown Page Types -->
            <b:else/>
               <div class='neo-unknown-page'>
                  <h1>Unknown Page Type</h1>
                  <p>This page type is not recognized by the template.</p>
               </div>
            </b:if>

          </div> <!-- End .neo-content-wrapper -->
        </b:includable> <!-- Akhir includable 'main' -->

      </b:widget> <!-- Akhir widget Blog1 -->
    </b:section>
  </main> <!-- End Main Content Area -->

  <!-- Site Footer -->
  <footer class='neo-site-footer'>
     <p>Copyright &#169; <data:blog.title/></p>
  </footer>

  <!-- Conditional Widget Sections -->
  <b:section cond='data:view.isHomepage' id='neo-widget-home' name='Home Widgets' showaddelement='yes' />
  <b:section cond='data:blog.pageType == "item"' id='neo-widget-post' name='Post Widgets' showaddelement='yes' />
  <b:section cond='data:blog.pageType == "static_page"' id='neo-widget-page' name='Page Widgets' showaddelement='yes' />
  <b:section cond='data:blog.pageType == "archive"' id='neo-widget-archive' name='archive Widgets' showaddelement='yes' />
  <b:section cond='data:blog.pageType == "index"' id='neo-widget-index' name='index Widgets' showaddelement='yes' />
  <b:section cond='data:blog.pageType == "error_page"' id='neo-widget-error' name='error Widgets' showaddelement='yes' />

 
 

   <!-- Conditional <script> Blocks (Placeholders - Best Practice) -->
  <b:if cond='data:blog.url == data:blog.homepageUrl'>
    <!-- Code 1. Homepage -->
    <script type='text/javascript'>//<![CDATA[
      // console.log("Homepage JS");
    //]]></script>
  <b:elseif cond='data:blog.pageType == "item"'/>
    <!-- Code 2. Post -->
    <script type='text/javascript'>//<![CDATA[
      // console.log("Item Page JS");
    //]]></script>
  <b:elseif cond='data:blog.pageType == "static_page"'/>
    <!-- Code 3. Custom Page -->
    <script type='text/javascript'>//<![CDATA[
      // console.log("Static Page JS");
    //]]></script>
  <b:elseif cond='data:blog.pageType == "archive"'/>
    <!-- Code 4. Archive -->
    <script type='text/javascript'>//<![CDATA[
      // console.log("Archive Page JS");
    //]]></script>
  <b:elseif cond='data:blog.pageType == "index"'/>
    <!-- Code 5. Index (Label/Search) -->
    <script type='text/javascript'>//<![CDATA[
      // console.log("Index Page JS");
    //]]></script>
  <b:elseif cond='data:blog.pageType == "error_page"'/>
    <!-- Code 6. Error Page -->
    <script type='text/javascript'>//<![CDATA[
      // console.log("Error Page JS");
    //]]></script>
  </b:if>


  <script type='text/javascript'>
    //<![CDATA[
    /**
    * neo-parser-dom.js
    * Parses Blogger data rendered by the neo-data-provider theme (v6+)
    * purely by reading the rendered DOM structure.
    * Does NOT rely on window.neoBlogData injection.
    *
    * Usage:
    * 1. Include this script in your Blogger theme (e.g., before </body>).
    * 2. After the DOM is loaded, the parsed data will be available in window.parsedBloggerDataDOM.
    */

    /**
    * Main function to parse data based on the rendered DOM.
    * @returns {Object} An object containing blog info and page-specific data.
    */
    function parseBloggerDataDOMOnly() {
        console.log("neo-parser-dom.js: Starting DOM-only parsing for:", window.location.href);

        let parsedData = {
            blog: {},
            pageType: 'unknown', // Default page type
            page: null
        };

        try {
            // 1. Get Basic Blog Info from DOM
            parsedData.blog = getBlogInfoFromDOM();

            // 2. Determine Page Type from DOM Structure
            parsedData.pageType = determinePageTypeFromDOM(parsedData.blog.homepageUrl);
            console.log("neo-parser-dom.js: Determined Page Type:", parsedData.pageType);

            // 3. Call Specific Parser based on Determined Type
            switch (parsedData.pageType) {
                case 'homepage':
                case 'archive':
                case 'index': // Covers Label and Search initially
                    // These pages use the post list table
                    const listPageData = parseListPageDOM(parsedData.pageType);
                    parsedData.page = listPageData.posts; // Store the array of posts
                    // Refine pageType and add specific info (like label name or search query)
                    if (parsedData.pageType === 'index') {
                        parsedData.pageType = listPageData.subType; // 'label' or 'search'
                        if (listPageData.subType === 'label') {
                            parsedData.blog.pageName = listPageData.nameOrQuery;
                        } else {
                            parsedData.blog.searchQuery = listPageData.nameOrQuery;
                        }
                    } else if (parsedData.pageType === 'archive') {
                        parsedData.blog.pageName = listPageData.nameOrQuery;
                    }
                    parsedData.blog.pageTitle = listPageData.title; // Get title from H2
                    break;
                case 'item':
                    parsedData.page = parseItemPageDOM();
                    parsedData.blog.pageTitle = parsedData.page?.title || document.title;
                    break;
                case 'static_page':
                    parsedData.page = parseStaticPageDOM();
                    parsedData.blog.pageTitle = parsedData.page?.title || document.title;
                    break;
                case 'error':
                    parsedData.page = parseErrorPageDOM();
                    parsedData.blog.pageTitle = parsedData.page?.title || document.title;
                    break;
                default: // Unknown
                    parsedData.page = parseUnknownPageDOM();
                    parsedData.blog.pageTitle = parsedData.page?.title || document.title;
                    break;
            }

        } catch (error) {
            console.error("neo-parser-dom.js: Error during DOM parsing:", error);
            parsedData.pageType = 'parsing_error';
            parsedData.page = { error: "Failed to parse page data from DOM.", details: error.message, stack: error.stack };
            // Attempt to get basic blog info even on error
            if (!parsedData.blog.title) {
                try { parsedData.blog = getBlogInfoFromDOM(); } catch(e){}
            }
        }

        // Add current URL regardless of parsing success/failure
        parsedData.blog.url = window.location.href;

        console.log("neo-parser-dom.js: Final Parsed Data (DOM Only):", parsedData);
        return parsedData;
    }

    /**
    * Extracts basic blog info from header/DOM.
    * @returns {Object} Object with title and homepageUrl.
    */
    function getBlogInfoFromDOM() {
        const blogInfo = {
            title: document.title, // Default to document title
            homepageUrl: null,
            url: window.location.href
        };
        try {
            const titleLink = document.querySelector('header.neo-site-header h1 a');
            if (titleLink) {
                blogInfo.title = titleLink.textContent.trim() || blogInfo.title;
                blogInfo.homepageUrl = titleLink.href || null;
            } else {
                console.warn("neo-parser-dom.js: Could not find header title link (header.neo-site-header h1 a).");
            }
        } catch(e) {
            console.error("neo-parser-dom.js: Error getting basic blog info.", e);
        }
        return blogInfo;
    }

    /**
    * Determines the page type by looking for specific container elements.
    * @param {string|null} homepageUrl - The determined homepage URL.
    * @returns {string} The determined page type ('homepage', 'item', 'static_page', etc.).
    */
    function determinePageTypeFromDOM(homepageUrl) {
        // Check for specific containers first
        if (document.querySelector('div.neo-homepage-data')) return 'homepage'; // Specific div for homepage
        if (document.querySelector('article.neo-post[itemscope]')) return 'item';
        if (document.querySelector('div.neo-custom-page')) return 'static_page';
        if (document.querySelector('div.neo-archive-data')) return 'archive';
        if (document.querySelector('div.neo-index-data')) return 'index'; // Label or Search
        if (document.querySelector('div.neo-error-page')) return 'error';
        if (document.querySelector('div.neo-unknown-page')) return 'unknown';

        // Fallback checks (less specific)
        // Check if current URL is homepage URL (if homepageUrl was found)
        if (homepageUrl && window.location.href === homepageUrl) {
            // Check if it has the post list table, could still be homepage if theme changed
            if (document.getElementById('neo-data-table-posts')) {
                return 'homepage';
            }
        }
        // If it has the post list table but none of the specific containers, assume index/archive
        if (document.getElementById('neo-data-table-posts')) {
            console.warn("neo-parser-dom.js: Found post list table but no specific container (archive/index). Assuming 'index'.");
            return 'index';
        }

        console.warn("neo-parser-dom.js: Could not determine page type from known elements.");
        return 'unknown'; // Default if nothing matches
    }


    /**
    * Parses list pages (Homepage, Archive, Index) which contain the post list table.
    * Extracts page title and specific type (label/search/archive name).
    * @param {string} initialPageType - The initially determined page type ('homepage', 'archive', 'index').
    * @returns {Object} Contains page title, posts array, subtype, and name/query if applicable.
    */
    function parseListPageDOM(initialPageType) {
        const result = {
            title: document.title, // Default
            posts: [],
            subType: initialPageType, // 'homepage', 'archive', 'index'
            nameOrQuery: null
        };
        let containerSelector;
        let titleSelector = 'h2'; // Usually H2 for these pages

        switch(initialPageType) {
            case 'homepage':
                containerSelector = '.neo-homepage-data';
                break;
            case 'archive':
                containerSelector = '.neo-archive-data';
                result.subType = 'archive';
                break;
            case 'index':
                containerSelector = '.neo-index-data';
                // subtype (label/search) determined below
                break;
            default:
                console.warn(`neo-parser-dom.js: Unexpected initialPageType in parseListPageDOM: ${initialPageType}`);
                result.posts = parsePostListTableDOM(); // Try parsing table anyway
                return result;
        }

        const container = document.querySelector(containerSelector);
        if (container) {
            const titleElement = container.querySelector(titleSelector);
            if (titleElement) {
                result.title = titleElement.textContent.trim();
                // Try to extract specific name/query from title for archive/index
                if (initialPageType === 'archive') {
                    // Example: "Archive: Monthly Archive - Post Data" -> "Monthly Archive"
                    const match = result.title.match(/^Archive:\s*(.*?)\s*-\s*Post Data$/i);
                    result.nameOrQuery = match ? match[1] : result.title; // Fallback to full title
                } else if (initialPageType === 'index') {
                    // Example: "Search Results: "query" - Post Data" -> "query"
                    const searchMatch = result.title.match(/^Search Results:\s*"(.*?)"\s*-\s*Post Data$/i);
                    // Example: "Label: LabelName - Post Data" -> "LabelName"
                    const labelMatch = result.title.match(/^Label:\s*(.*?)\s*-\s*Post Data$/i);

                    if (searchMatch) {
                        result.subType = 'search';
                        result.nameOrQuery = searchMatch[1];
                    } else if (labelMatch) {
                        result.subType = 'label';
                        result.nameOrQuery = labelMatch[1];
                    } else {
                        result.subType = 'index'; // Could not determine subtype
                        result.nameOrQuery = result.title; // Fallback
                    }
                }
            } else {
                console.warn(`neo-parser-dom.js: Could not find title element (${titleSelector}) in ${containerSelector}.`);
            }
            // Parse the table within the container (or globally if needed)
            result.posts = parsePostListTableDOM(container); // Pass container to scope search
        } else {
            console.warn(`neo-parser-dom.js: Could not find container element: ${containerSelector}. Parsing table globally.`);
            result.posts = parsePostListTableDOM(); // Fallback to global search
        }

        return result;
    }


    /**
    * Parses the post list table (#neo-data-table-posts). DOM ONLY version.
    * @param {Element} [container=document] - Optional container element to search within.
    * @returns {Array<Object>} Array of post objects or empty array.
    */
    function parsePostListTableDOM(container = document) {
        const table = container.querySelector('#neo-data-table-posts'); // Search within container or document
        if (!table) {
            console.warn("neo-parser-dom.js: Table #neo-data-table-posts not found within the scope.", container === document ? "Document" : container);
            return []; // Return empty array
        }

        const rows = table.querySelectorAll('tbody tr');
        const posts = [];
        // Expected header order: ID, Title, URL, Published ISO, Published Formatted, Author, Labels, Snippet, First Image URL

        rows.forEach((row, rowIndex) => {
            const cells = row.querySelectorAll('td');
            if (cells.length === 1 && cells[0].hasAttribute('colspan')) return; // Skip "No posts" row
            if (cells.length !== 9) {
                console.warn(`neo-parser-dom.js: Row ${rowIndex} in table skipped: Expected 9 cells, found ${cells.length}.`, row);
                return;
            }

            const post = {};
            try {
                post.postId = row.dataset.postId || cells[0]?.textContent.trim() || null;
                post.title = cells[1]?.textContent.trim() || '';
                post.url = cells[2]?.textContent.trim() || ''; // Plain text URL
                post.publishedIso = cells[3]?.querySelector('time')?.getAttribute('datetime') || cells[3]?.textContent.trim() || '';
                post.publishedFormatted = cells[4]?.textContent.trim() || '';
                post.author = cells[5]?.textContent.trim() || '';

                const labelListItems = cells[6]?.querySelectorAll('li');
                post.labels = labelListItems ? Array.from(labelListItems).map(li => ({
                    name: li.getAttribute('neo-label-name') || li.textContent.trim(),
                    url: li.getAttribute('data-label-url') || null
                })) : [];

                post.snippet = cells[7]?.textContent.trim() || '';
                const imageUrl = cells[8]?.textContent.trim();
                post.firstImageUrl = (imageUrl && imageUrl !== '(No image)') ? imageUrl : null;

                posts.push(post);
            } catch (cellError) {
                console.warn(`neo-parser-dom.js: Error parsing cells in table row ${rowIndex}:`, cellError, row);
            }
        });
        return posts;
    }

    /**
    * Parses data from an Item page (Single Post). DOM ONLY version.
    * @returns {Object|null} Post detail object or null.
    */
    function parseItemPageDOM() {
        const article = document.querySelector('article.neo-post[itemscope]');
        if (!article) {
            console.warn("neo-parser-dom.js: Article element for Item page not found.");
            return null;
        }

        const post = {};
        const contentDiv = article.querySelector('div[itemprop="articleBody"]');

        post.postId = contentDiv?.id?.replace('neo-post-body-', '') || null;
        post.title = article.querySelector('h1[itemprop="headline"]')?.textContent.trim() || document.title; // Fallback to doc title
        post.url = window.location.href; // Current URL

        const timeEl = article.querySelector('time[itemprop="datePublished"]');
        post.publishedIso = timeEl?.getAttribute('datetime') || '';
        post.publishedFormatted = timeEl?.textContent.trim() || '';

        const labelLinks = article.querySelectorAll('.neo-post-labels a[itemprop="keywords"]');
        post.labels = labelLinks ? Array.from(labelLinks).map(a => ({
            name: a.textContent.trim(),
            url: a.href || null
        })) : [];

        post.bodyHtml = contentDiv?.innerHTML || '';
        // post.author = article.querySelector('[itemprop="author"]')?.textContent.trim() || ''; // Add if author itemprop exists

        return post;
    }

    /**
    * Parses data from a Static page. DOM ONLY version.
    * @returns {Object|null} Page detail object or null.
    */
    function parseStaticPageDOM() {
        const pageDiv = document.querySelector('div.neo-custom-page');
        if (!pageDiv) {
            console.warn("neo-parser-dom.js: Container element for Static page not found.");
            return null;
        }

        const page = {};
        const contentDiv = pageDiv.querySelector('div.neo-page-content');

        page.pageId = contentDiv?.id?.replace('neo-post-body-', '') || null;
        page.title = pageDiv.querySelector('h1.neo-page-title')?.textContent.trim() || document.title; // Fallback
        page.url = window.location.href;
        page.bodyHtml = contentDiv?.innerHTML || '';

        return page;
    }

    /**
    * Parses data from an Error page. DOM ONLY version.
    * @returns {Object} Page detail object.
    */
    function parseErrorPageDOM() {
        const pageDiv = document.querySelector('div.neo-error-page');
        const title = pageDiv?.querySelector('h1')?.textContent.trim() || "Error";
        const message = pageDiv?.querySelector('p')?.textContent.trim() || "Page not found.";
        return { title, message };
    }

    /**
    * Parses data from an Unknown page type. DOM ONLY version.
    * @returns {Object} Page detail object.
    */
    function parseUnknownPageDOM() {
        const pageDiv = document.querySelector('div.neo-unknown-page');
        const title = pageDiv?.querySelector('h1')?.textContent.trim() || "Unknown Page";
        const message = pageDiv?.querySelector('p')?.textContent.trim() || "Unknown page type detected.";
        return { title, message };
    }


    // --- Execution ---
    document.addEventListener('DOMContentLoaded', () => {
        console.log("neo-parser-dom.js: DOM fully loaded. Starting DOM-only parser...");
        // Parse the data using only DOM and store it globally
        window.parsedBloggerDataDOM = parseBloggerDataDOMOnly();

        // Example: Access the data
        // console.log("Accessing DOM-parsed data:", window.parsedBloggerDataDOM);
    });
    //]]>
  </script>
</body>
</html>